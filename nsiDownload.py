# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GetNSIData
                                 A QGIS plugin
 This plugin downloads data from the U.S. National Structures Inventory for a specified state or region.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-12-21
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Sebastian Rowan
        email                : sebastian.rowan@unh.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.core import QgsProject, Qgis
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QUrl
from qgis.PyQt.QtNetwork import QNetworkRequest, QNetworkReply,  QNetworkAccessManager

class StateDownload:

    def __init__(cls, parent=None, iface=None):
        cls.parent = parent
        cls.iface = iface
        cls.nam = QNetworkAccessManager()
        cls.nam.finished.connect(cls.reply_finished)
        #cls.shown = False

    def reply_finished(cls, reply):
        if reply != None:
            possibleRedirectUrl = reply.attribute(QNetworkRequest.RedirectionTargetAttribute)
             
            if possibleRedirectUrl != None: # if value, request is redirected.
                request = QNetworkRequest(possibleRedirectUrl)
                result = cls.nam.get(request)  
                result.downloadProgress.connect(lambda done,  all,  reply=result: cls.progress(done,  all,  reply))
            else:             
                if reply.error() != None and reply.error() != QNetworkReply.NoError:
                    cls.is_error = reply.errorString()
                    reply.abort()
                    reply.deleteLater()
                        
                elif reply.error() ==  QNetworkReply.NoError:
                    result = reply.readAll()
                    f = open(cls.filename, 'wb')
                    f.write(result)
                    f.close()      
                    
                    out_gpkg = cls.unzip(cls.filename)
                    (dir, file) = os.path.split(out_gpkg)
                    
                    try:
                        if not cls.layer_exists(file):
                            cls.iface.addVectorLayer(out_gpkg, file, 'ogr')
                    except:
                        pass
                        
                    
                    cls.iface.messageBar().pushMessage(
                        "Success", f"Downloaded file saved at {cls.dir}",
                        level=Qgis.Success, duration=5
                    )
                        
                    reply.deleteLater()

    def layer_exists(cls,  name):            
        # Return True if layer of given name exists in current instance.
        if len(QgsProject.instance().mapLayersByName(name)) != 0:
            return True
        else:
            return False
            
    def unzip(cls,  zip_file):
        import zipfile
        (dir, file) = os.path.split(zip_file)

        if not dir.endswith(':') and not os.path.exists(dir):
            os.mkdir(dir)
        
        try:
            zf = zipfile.ZipFile(zip_file)
    
            # extract files to directory structure
            for i, name in enumerate(zf.namelist()):
                if not name.endswith('/'):
                    outfile = open(os.path.join(dir, name), 'wb')
                    outfile.write(zf.read(name))
                    outfile.flush()
                    outfile.close()
                    return os.path.join(dir, name)
        except:
            return None

    def get_state_data(cls, fips, dest):
        url = QUrl(f"https://nsi.sec.usace.army.mil/downloads/nsi_2022/nsi_2022_{fips}.gpkg.zip")
        saveName = f"nsi_2022_{fips}.gpkg.zip"
        fullPath = f"{dest}\{saveName}"
        cls.dir = dest
        cls.filename = fullPath
        cls.load_to_canvas = True
        req = QNetworkRequest(url)
        reply = cls.nam.get(req)


class APIDownload:

    def __init__{cls, parent=None, iface=None):
        cls.parent = parent
        cls.iface = iface
        cls.nam = QNetworkAccessManager()
        cls.nam.finished.connect(cls.reply_finished)
        
    def api_reply_finished(cls, reply):
        if reply.error() != None and reply.error() != QNetworkReply.NoError:
            cls.is_error = reply.errorString()
            reply.abort()
            reply.deleteLater()
                
        elif reply.error() ==  QNetworkReply.NoError:
            result = reply.readAll() # result should be JSON response from API
                            
            reply.deleteLater()