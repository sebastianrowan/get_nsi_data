# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GetNSIData
                                 A QGIS plugin
 This plugin downloads data from the U.S. National Structures Inventory for a specified state or region.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-21
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Sebastian Rowan
        email                : sebastian.rowan@unh.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QUrl
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.PyQt.QtNetwork import QNetworkRequest, QNetworkReply,  QNetworkAccessManager
from qgis.core import QgsProject, Qgis
import os
import os.path
import tempfile

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .get_nsi_data_dialog import GetNSIDataDialog, GetStateNSIDataDialog



class GetNSIData:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GetNSIData_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)
        
        self.dir = tempfile.gettempdir()
        self.nam = QNetworkAccessManager()
        self.nam.finished.connect(self.reply_finished)    
        
        
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Get NSI Data')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GetNSIData', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/get_nsi_data/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Get State NSI Data'),
            callback=self.runState,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Get FIPS NSI Data'),
            callback=self.run,
            parent=self.iface.mainWindow())
            
        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Get NSI Data'),
                action)
            self.iface.removeToolBarIcon(action)

    def selectStateOutputFolder(self):
        folderName = QFileDialog.getExistingDirectory(self.dlgState, "Select output folder")
        self.dlgState.stateSaveLine.setText(folderName)
        self.dir = folderName
     
    def reply_finished(self, reply):    
        
        if reply != None:
            possibleRedirectUrl = reply.attribute(QNetworkRequest.RedirectionTargetAttribute)
            
        # If the URL is not empty, we're being redirected. 
            if possibleRedirectUrl != None:
                request = QNetworkRequest(possibleRedirectUrl)
                result = self.nam.get(request)  
                result.downloadProgress.connect(lambda done,  all,  reply=result: self.progress(done,  all,  reply))
            else:             
                if reply.error() != None and reply.error() != QNetworkReply.NoError:
                    self.is_error = reply.errorString()
                    reply.abort()
                    reply.deleteLater() # *** What does this do?
                        
                elif reply.error() ==  QNetworkReply.NoError:
                    result = reply.readAll()
                    f = open(self.filename, 'wb')
                    f.write(result)
                    f.close()      
                    
                    out_gpkg = self.unzip(self.filename)
                    (dir, file) = os.path.split(out_gpkg)
                    
                    try:
                        if not self.layer_exists(file):
                            self.iface.addVectorLayer(out_gpkg, file, 'ogr')
                    except:
                        pass
                        
                    
                    self.iface.messageBar().pushMessage(
                        "Success", f"Downloaded file saved at {self.dir}",
                        level=Qgis.Success, duration=5
                    )
                        
                # Clean up. */
                    reply.deleteLater()# *** What does this do?
                    
    def layer_exists(self,  name):            
        
        if len(QgsProject.instance().mapLayersByName(name)) != 0:
            return True
        else:
            return False
            
    def unzip(self,  zip_file):
        import zipfile
        (dir, file) = os.path.split(zip_file)

        if not dir.endswith(':') and not os.path.exists(dir):
            os.mkdir(dir)
        
        try:
            zf = zipfile.ZipFile(zip_file)
    
            # extract files to directory structure
            for i, name in enumerate(zf.namelist()):
                if not name.endswith('/'):
                    outfile = open(os.path.join(dir, name), 'wb')
                    outfile.write(zf.read(name))
                    outfile.flush()
                    outfile.close()
                    return os.path.join(dir, name)
        except:
            return None
            
    def set_progress(self,  akt_val=None,  all_val=None):
        if all_val == None:
            progress_value = self.dlgState.progressBar.value() + 10
            self.dlgState.progressBar.setValue(progress_value)
            
        else:
            self.dlgState.progressBar.setMaximum(all_val)
            self.dlgState.progressBar.setValue(akt_val)
            
    def runState(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            #self.first_start = False
            self.dlgState = GetStateNSIDataDialog()
            self.dlgState.stateFolderButton.clicked.connect(self.selectStateOutputFolder)
        
        # In future, move this to external file and load in
        statesDict = {
            'Alabama': {'abbr':'AL', 'fips':'01'},
            'Alaska': {'abbr':'AK', 'fips':'02'},
            'Arizona': {'abbr':'AZ', 'fips':'04'},
            'Arkansas': {'abbr':'AR', 'fips':'05'},
            'California': {'abbr':'CA', 'fips':'06'},
            'Colorado': {'abbr':'CO', 'fips':'08'},
            'Connecticut': {'abbr':'CT', 'fips':'09'},
            'Delaware': {'abbr':'DE', 'fips':'10'},
            'District of Columbia': {'abbr':'DC', 'fips':'11'},
            'Florida': {'abbr':'FL', 'fips':'12'},
            'Georgia': {'abbr':'GA', 'fips':'13'},
            'Hawaii': {'abbr':'HI', 'fips':'15'},
            'Idaho': {'abbr':'ID', 'fips':'16'},
            'Illinois': {'abbr':'IL', 'fips':'17'},
            'Indiana': {'abbr':'IN', 'fips':'18'},
            'Iowa': {'abbr':'IA', 'fips':'19'},
            'Kansas': {'abbr':'KS', 'fips':'20'},
            'Kentucky': {'abbr':'KY', 'fips':'21'},
            'Louisiana': {'abbr':'LA', 'fips':'22'},
            'Maine': {'abbr':'ME', 'fips':'23'},
            'Maryland': {'abbr':'MD', 'fips':'24'},
            'Massachusetts': {'abbr':'MA', 'fips':'25'},
            'Michigan': {'abbr':'MI', 'fips':'26'},
            'Minnesota': {'abbr':'MN', 'fips':'27'},
            'Mississippi': {'abbr':'MS', 'fips':'28'},
            'Missouri': {'abbr':'MO', 'fips':'29'},
            'Montana': {'abbr':'MT', 'fips':'30'},
            'Nebraska': {'abbr':'NE', 'fips':'31'},
            'Nevada': {'abbr':'NV', 'fips':'32'},
            'New Hampshire': {'abbr':'NH', 'fips':'33'},
            'New Jersey': {'abbr':'NJ', 'fips':'34'},
            'New Mexico': {'abbr':'NM', 'fips':'35'},
            'New York': {'abbr':'NY', 'fips':'36'},
            'North Carolina': {'abbr':'NC', 'fips':'37'},
            'North Dakota': {'abbr':'ND', 'fips':'38'},
            'Ohio': {'abbr':'OH', 'fips':'39'},
            'Oklahoma': {'abbr':'OK', 'fips':'40'},
            'Oregon': {'abbr':'OR', 'fips':'41'},
            'Pennsylvania': {'abbr':'PA', 'fips':'42'},
            'Rhode Island': {'abbr':'RI', 'fips':'44'},
            'South Carolina': {'abbr':'SC', 'fips':'45'},
            'South Dakota': {'abbr':'SD', 'fips':'46'},
            'Tennessee': {'abbr':'TN', 'fips':'47'},
            'Texas': {'abbr':'TX', 'fips':'48'},
            'Utah': {'abbr':'UT', 'fips':'49'},
            'Vermont': {'abbr':'VT', 'fips':'50'},
            'Virginia': {'abbr':'VA', 'fips':'51'},
            'Washington': {'abbr':'WA', 'fips':'53'},
            'West Virginia': {'abbr':'WV', 'fips':'54'},
            'Wisconsin': {'abbr':'WI', 'fips':'55'},
            'Wyoming': {'abbr':'WY', 'fips':'56'}
        }
        
        # Clear the contents of the state comboBox from previous runs
        self.dlgState.comboBoxState.clear()
        # Populate the comboBox with state names
        self.dlgState.comboBoxState.addItems([state for state in statesDict.keys()])
        
        self.dlgState.progressBar.setMaximum(100)
        self.dlgState.progressBar.setValue(0)

        # show the dialog
        self.dlgState.show()
        # Run the dialog event loop
        result = self.dlgState.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            fips = statesDict[self.dlgState.comboBoxState.currentText()]['fips']
            dest = self.dir
            self.getStateData(fips, dest)
            
            
    def getStateData(self, fips, dest):
        url = QUrl(f"https://nsi.sec.usace.army.mil/downloads/nsi_2022/nsi_2022_{fips}.gpkg.zip")
        saveName = f"nsi_2022_{fips}.gpkg.zip"
        fullPath = f"{dest}\{saveName}"
        self.filename = fullPath
        self.load_to_canvas = True
        req = QNetworkRequest(url)
        reply = self.nam.get(req)
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            #self.first_start = False
            self.dlg = GetNSIDataDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
